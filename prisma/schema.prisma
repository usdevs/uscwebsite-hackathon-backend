// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Appears that the relations need to be optional https://stackoverflow.com/questions/73000266/prisma-not-deleting-because-it-depends-on-nonexistent-record

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["orderByNulls"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int         @id @default(autoincrement())
  name             String
  telegramId       String?     @unique
  telegramUserName String
  telegramDpUrl    String? // saves the url to the telegram display pic
  userOrg          UserOnOrg[]
  deleted          Boolean     @default(false) // supports soft delete
}

enum IGCategory {
  Sports
  SocioCultural
  Others
  Guips
}

model Organisation {
  id          Int         @id @default(autoincrement())
  name        String
  description String      @default("A NUSC organisation")
  isAdminOrg  Boolean     @default(false)
  bookings    Booking[]
  userOrg     UserOnOrg[]
  inviteLink  String
  slug        String      @unique
  category    IGCategory
  isInactive  Boolean     @default(false)
  isInvisible Boolean     @default(false) // is not displayed on the website
}

model UserOnOrg {
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     Int // relation scalar field (used in the `@relation` attribute above)
  org        Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgId      Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime     @default(now())
  bookings   Booking[]
  isIGHead   Boolean      @default(false)
  deleted    Boolean      @default(false) // supports soft delete

  @@id([userId, orgId])
}

model Venue {
  id      Int       @id @default(autoincrement())
  name    String
  booking Booking[]
}

model Booking {
  id             Int          @id @default(autoincrement())
  eventName      String
  venue          Venue        @relation(fields: [venueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  venueId        Int
  bookedBy       UserOnOrg    @relation(fields: [userId, userOrgId], references: [userId, orgId], onDelete: Cascade, onUpdate: Cascade)
  userId         Int
  userOrgId      Int
  bookedForOrg   Organisation? @relation(fields: [bookedForOrgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookedForOrgId Int? // // this field will only be populated if a user (typically an admin user) has made a
  // booking on behalf of another org
  start          DateTime // start time of booking
  end            DateTime // end time of booking
  bookedAt       DateTime     @default(now())
}

model Course {
  code  String @id
  name  String
  teach Teach[]
}

model Professor {
  id    Int    @id @default(autoincrement())
  name  String
  teach Teach[]
}

model Teach {
  teachId     Int       @id @default(autoincrement())
  ay          String
  semester    String
  courseCode  String
  professorId Int    

  course      Course    @relation(fields: [courseCode], references: [code])
  professor   Professor @relation(fields: [professorId], references: [id])
  submit      Submit[]
}

model Student {
  id     Int      @id @default(autoincrement())
  name   String
  nusId  String
  submit Submit[]
}

model Submission {
  id          Int       @id @default(autoincrement())
  title       String
  text        String
  lastUpdated DateTime  @default(now())
  isPublished Boolean   @default(false)
  submit      Submit[]
}

model Submit {
  submissionId  Int
  studentId     Int
  teachId       Int

  submission    Submission @relation(fields: [submissionId], references: [id])
  student       Student    @relation(fields: [studentId], references: [id])
  teach         Teach      @relation(fields: [teachId], references: [teachId])

  @@id([submissionId, studentId, teachId])
}