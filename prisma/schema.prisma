// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Appears that the relations need to be optional https://stackoverflow.com/questions/73000266/prisma-not-deleting-because-it-depends-on-nonexistent-record

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByNulls"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int         @id @default(autoincrement())
  name             String
  telegramId       String?     @unique
  telegramUserName String
  telegramDpUrl    String? // saves the url to the telegram display pic
  userOrg          UserOnOrg[]
  deleted          Boolean     @default(false) // supports soft delete
}

enum IGCategory {
  Sports
  SocioCultural
  Others
  Guips
}

model Organisation {
  id          Int         @id @default(autoincrement())
  name        String
  description String      @default("A NUSC organisation")
  isAdminOrg  Boolean     @default(false)
  bookings    Booking[]
  userOrg     UserOnOrg[]
  inviteLink  String
  slug        String      @unique
  category    IGCategory
  isInactive  Boolean     @default(false)
  isInvisible Boolean     @default(false) // is not displayed on the website
  orgRoles    OrgRole[]
}

model UserOnOrg {
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     Int // relation scalar field (used in the `@relation` attribute above)
  org        Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orgId      Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime     @default(now())
  bookings   Booking[]
  isIGHead   Boolean      @default(false)
  deleted    Boolean      @default(false) // supports soft delete

  @@id([userId, orgId])
}

model Venue {
  id             Int              @id @default(autoincrement())
  name           String
  booking        Booking[]
  VenueAdminRole VenueAdminRole[]
}

// Roles that are considered admins for the venue
model VenueAdminRole {
  id      Int   @id @default(autoincrement())
  venueId Int
  venue   Venue @relation(fields: [venueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId  Int
  role    Role  @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Booking {
  id             Int           @id @default(autoincrement())
  eventName      String
  venue          Venue         @relation(fields: [venueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  venueId        Int
  bookedBy       UserOnOrg     @relation(fields: [userId, userOrgId], references: [userId, orgId], onDelete: Cascade, onUpdate: Cascade)
  userId         Int
  userOrgId      Int
  bookedForOrg   Organisation? @relation(fields: [bookedForOrgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookedForOrgId Int? // // this field will only be populated if a user (typically an admin user) has made a
  // booking on behalf of another org
  start          DateTime // start time of booking
  end            DateTime // end time of booking
  bookedAt       DateTime      @default(now())
}

// Ability is a single action that the user can perform
model Ability {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  description   String
  createdAt     DateTime      @default(now())
  roleAbilities RoleAbility[]
}

// A role is a collection of abilities
model Role {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  createdAt      DateTime         @default(now())
  roleAbilities  RoleAbility[]
  orgRoles       OrgRole[]
  VenueAdminRole VenueAdminRole[]
}

model RoleAbility {
  id        Int     @id @default(autoincrement())
  roleId    Int
  abilityId Int
  role      Role    @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ability   Ability @relation(fields: [abilityId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([roleId, abilityId])
}

model OrgRole {
  id           Int          @id @default(autoincrement())
  orgId        Int
  roleId       Int
  organisation Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role         Role         @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([orgId, roleId])
}

model Course {
  code            String           @id
  name            String
  courseOfferings CourseOffering[]
}

model Professor {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  courseOfferings CourseOffering[]
}

enum Semester {
  Semester1
  Semester2
}

model CourseOffering {
  id           Int          @id @default(autoincrement())
  courseCode   String
  course       Course       @relation(fields: [courseCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
  professorId  Int
  professor    Professor    @relation(fields: [professorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  semester     Semester
  academicYear Int
  submissions  Submission[]

  @@unique([courseCode, professorId, semester, academicYear])
}

model Student {
  id              Int          @id @default(autoincrement())
  matriculationNo String       @unique
  name            String
  submissions     Submission[]
}

model Submission {
  id               Int            @id @default(autoincrement())
  title            String
  text             String
  lastUpdated      DateTime       @default(now())
  isPublished      Boolean        @default(false)
  studentId        Int
  student          Student        @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseOfferingId Int
  courseOffering   CourseOffering @relation(fields: [courseOfferingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
